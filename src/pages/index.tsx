import Head from "next/head";
import axios from "axios"
import styles from "./Home.module.css";
import { useState, useEffect } from "react";
import Pagination from "@/components/Pagination";
import { paginate } from "../helper/paginate"
import { Box, Button, Card, CardBody, CardFooter, CardHeader, Flex, Heading, SimpleGrid, Text } from "@chakra-ui/react";
import Link from "next/link";
import Layout from "@/components/Layout";
import Swal from "sweetalert2";

export default function Home({ data }: { data: any }) {
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10;

  const onPageChange = (page: number) => {
    setCurrentPage(page);
  };


  const paginatedPosts = paginate(data, currentPage, pageSize);
  console.log("this is paginated posts", paginatedPosts)
  const newPaginatedPosts = paginatedPosts
  const handleDelete = async (id: number) => {
    await axios.delete('https://jsonplaceholder.typicode.com/posts/' + id)
    const index = newPaginatedPosts.findIndex((post: any) => post.id === id);
    if (index !== -1) {
      newPaginatedPosts.splice(index, 1);
    }
  }

  return (
    <Layout title="Home | Rakha">
      <Box className={styles.container} minH={"100vh"}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Flex justifyContent='center' mt='10'>
          <Heading>
            Lists of all posts
          </Heading>
        </Flex>
        <SimpleGrid spacing={4} templateColumns='repeat(auto-fill, minmax(200px, 1fr))' my={20}>
          {paginatedPosts?.map((item: any) => {
            return (
              <>
                <Card key={item.id} boxShadow={'lg'} _hover={{ boxShadow: 'none' }}>
                  <CardHeader>
                    <Heading size='md'> {item.title}</Heading>
                  </CardHeader>
                  <CardBody>
                    <Text>{item.body}</Text>
                  </CardBody>
                  <CardFooter>
                    <Flex flexDirection='column' w='full' justifyContent='center' alignItems='center' rowGap={2}>
                      <Flex columnGap={2} >
                        <Link href={`/details/${item.id}`}>
                          <Button w='full'>View details</Button>
                        </Link>
                        <Link href={`/edit/${item.id}`}>
                          <Button w='full'>Edit</Button>
                        </Link>
                      </Flex>
                      <Flex w='full' onClick={(event) => {
                        event.preventDefault()
                        console.log("going to be deleted", item);
                        Swal.fire({
                          title: 'Are you sure?',
                          text: "You won't be able to revert this!",
                          icon: 'warning',
                          showCancelButton: true,
                          confirmButtonColor: '#3085d6',
                          cancelButtonColor: '#d33',
                          confirmButtonText: 'Yes, delete it!'
                        }).then((result) => {
                          if (result.isConfirmed) {
                            handleDelete(item.id)
                            Swal.fire(
                              'Deleted!',
                              'Your file has been deleted.',
                              'success'
                            )
                          }
                        })
                      }}>
                        <Button w='full'>Delete Post</Button>
                      </Flex>
                    </Flex>
                  </CardFooter>
                </Card>




              </>
            )
          })}
        </SimpleGrid>

        <Pagination
          items={data.length} // 100
          currentPage={currentPage} // 1
          pageSize={pageSize} // 10
          onPageChange={onPageChange}
        />
      </ Box>
    </Layout>

  )
}
export const getStaticProps = async () => {
  const res = await axios.get("https://jsonplaceholder.typicode.com/posts");
  const data = await res.data;

  return {
    props: { data },
  };
};
